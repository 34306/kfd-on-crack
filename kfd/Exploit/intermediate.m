//
//  intermediate.m
//  kfd
//
//  Created by Serena on 13/08/2023.
//  

#import <Foundation/Foundation.h>
#import "libkfd.h"
#import "KernRW/KernelRwWrapper.h"

uint64_t _kfd;

uint64_t kread64(uint64_t where) {
    uint64_t out;
    _kread(_kfd, where, &out, sizeof(uint64_t));
    return out;
}

void kwrite64(uint64_t where, uint64_t what) {
    u64 _buf[1] = {};
    _buf[0] = what;
    _kwrite((u64)(_kfd), &_buf, where, sizeof(u64));
}

u64 kopen_intermediate(u64 puaf_pages, u64 puaf_method, u64 kread_method, u64 kwrite_method) {
    u64 kfd = kopen(puaf_pages, puaf_method, kread_method, kwrite_method);
    
    puts("kopened"); sleep(1);
    
    _kfd = kfd;

    u64 curr_proc = ((struct kfd *)kfd)->info.kernel.current_proc;
    u64 self_task = ((struct kfd *)kfd)->info.kernel.current_task;
    u64 kslide = ((struct kfd *)kfd)->info.kernel.kernel_slide;
    
    initKernRw(self_task, kread64, kwrite64);
    
    if (isKernRwReady()) {
        printf("kernRW Ready!\n");
    } else {
        printf("kernRW def not ready!\n");
    }
    
    return kfd;
}

void kclose_intermediate(u64 kfd) {
    return kclose(kfd);
}
